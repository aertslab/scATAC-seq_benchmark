def _ = params.tools.scenic
// Sanity checks
if(!(params.global.species in ["human", "mouse", "fly"]))
    throw new Exception("No cisTarget databases found for the given species: "+ params.global.species)
if(params.global.species == "human" && !(params.global.genome.assembly in ["hg38"]))
    throw new Exception("No cisTarget databases found for the given genome: "+ params.global.genome.assembly)

params {
    tools {
        scenic {
            cistarget {
                adj = "adj.tsv"

                type = ""
                output = "reg.csv"
                /*
                --no_pruning
                --chunk_size
                --all_modules
                --transpose
                */

                // Motif enrichment arguments:
                rank_threshold = "5000"
                auc_threshold = "0.05"
                nes_threshold = "3.0"

                // Motif annotation arguments:
                min_orthologous_identity = "0.0"
                max_similarity_fdr = "0.001"
                annotations_fname = ""

                // Module generation arguments:
                thresholds = "0.75,0.90"
                top_n_targets = "50"
                top_n_regulators = "5,10,50"
                min_genes = "20"

                // expression_mtx_fname = "" // uses params.tools.scenic.filteredLoom

            }
        }
    }
}

// Type of databases to use
// PUBLIC
def useMotifs = _.containsKey("cistarget") && _.cistarget.containsKey("useMotifs") ? _.cistarget.useMotifs: true
def useTracks = _.containsKey("cistarget") && _.cistarget.containsKey("useTracks") ? _.cistarget.useTracks: false

if(useMotifs)
    includeConfig "dbs/cistarget-motifs-${params.tools.scenic.motifsDbVersion}.config"
if(useTracks)
    includeConfig "dbs/cistarget-tracks-${params.tools.scenic.tracksDbVersion}.config"
