
/*
    This error retry strategy and check_max function was modified from nf-core:
    https://github.com/nf-core/tools/blob/master/nf_core/pipeline-template/%7B%7Bcookiecutter.name_noslash%7D%7D/conf/base.config
*/

params {
    // Defaults only, expecting to be overwritten based on available cluster resources
    max_memory = 170.GB
    max_cpus = 20
    max_time = 168.h
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
                return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
                return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
                return obj
        }
    }
}


// define computing resources via process labels
process {

    // this executor applies to all processes, except when overridden in another label
    executor = 'local'

    // allow a process to be re-tried if the exit code falls in this range. Otherwise, set to 'finish' (wait for completion of existing jobs)
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }

    maxRetries = 2

    // set default options that apply to all processes:
    cpus = { check_max(2 * task.attempt, 'cpus') }
    memory = { check_max(30.GB * task.attempt, 'memory') }

    // additional cluster options (applies to grid based executors):
    clusterOptions = "-A cluster_account"

    // set a default compute profile
    withLabel: 'compute_resources__default' {
        time = { check_max(1.h * task.attempt, 'time') }
    }

    withLabel: 'compute_resources__minimal' {
        cpus = { check_max(1 * task.attempt, 'cpus') }
        memory = { check_max(1.GB * task.attempt, 'memory') }
    }

    withLabel: 'compute_resources__mem' {
        cpus = { check_max(4, 'cpus') }
        memory = { check_max(160.GB * task.attempt, 'memory') }
    }

    withLabel: 'compute_resources__cpu' {
        cpus = { check_max(20, 'cpus') }
        memory = { check_max(80.GB * task.attempt, 'memory') }
    }

}

